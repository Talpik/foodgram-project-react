# Generated by Django 3.2.7 on 2021-10-04 22:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import foodgram.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('sorting', models.PositiveIntegerField(default=0, verbose_name='sorting')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='name of the ingredient')),
                ('measurement_unit', models.CharField(max_length=20, verbose_name='unit of measurement')),
            ],
            options={
                'verbose_name': 'ingredient',
                'verbose_name_plural': 'ingredients',
                'ordering': ('sorting',),
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid1, max_length=100, unique=True, verbose_name='slug')),
                ('is_visible', models.BooleanField(default=True, verbose_name='is visible')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('sorting', models.PositiveIntegerField(default=0, verbose_name='sorting')),
                ('name', models.CharField(max_length=100, verbose_name='name of the product category')),
            ],
            options={
                'verbose_name': 'category of products',
                'verbose_name_plural': 'categories of products',
                'ordering': ('sorting',),
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid1, max_length=100, unique=True, verbose_name='slug')),
                ('is_visible', models.BooleanField(default=True, verbose_name='is visible')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('sorting', models.PositiveIntegerField(default=0, verbose_name='sorting')),
                ('image', models.ImageField(help_text='image size no more than 1MB', upload_to=foodgram.utils.ImageUploadToFactory('images'), verbose_name='image')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='name of the recipe')),
                ('text', models.TextField(blank=True, null=True, verbose_name='text')),
                ('cooking_time', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='cooking time')),
                ('author', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'recipe',
                'verbose_name_plural': 'recipes',
                'ordering': ('sorting',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default=uuid.uuid1, max_length=100, unique=True, verbose_name='slug')),
                ('is_visible', models.BooleanField(default=True, verbose_name='is visible')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('sorting', models.PositiveIntegerField(default=0, verbose_name='sorting')),
                ('name', models.CharField(choices=[('BR', 'Завтрак'), ('LN', 'Обед'), ('DN', 'Ужин')], db_index=True, max_length=20, verbose_name='meal time')),
                ('color', models.CharField(max_length=10, verbose_name='HEX color scheme')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ('sorting',),
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_authors', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'subscription',
                'verbose_name_plural': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='ShoppingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shopping_list_recipes', to='recipes.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shopping_list_owners', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(verbose_name='amount')),
                ('ingredients', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_amounts', to='recipes.ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_amounts', to='recipes.recipe', verbose_name='recipe')),
            ],
            options={
                'verbose_name': 'ingredients of recipe',
                'verbose_name_plural': 'ingredients of recipe',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients',
            field=models.ManyToManyField(through='recipes.RecipeIngredient', to='recipes.Ingredient', verbose_name='ingredients of recipe'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(related_name='recipes', to='recipes.Tag', verbose_name='tags'),
        ),
        migrations.CreateModel(
            name='FavoriteRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_recipes', to='recipes.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_recipe_subscribers', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'verbose_name': 'favorite recipe',
                'verbose_name_plural': 'favorite recipes',
            },
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='follow_unique'),
        ),
        migrations.AddConstraint(
            model_name='recipeingredient',
            constraint=models.UniqueConstraint(fields=('ingredients', 'recipe'), name='recipe_ingredients_unique'),
        ),
    ]
